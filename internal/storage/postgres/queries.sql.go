// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package postgres

import (
	"context"

	"github.com/byrdapp/timestamp/timeparser"
	"github.com/google/uuid"
)

const acceptBooking = `-- name: AcceptBooking :exec
UPDATE bookings SET accepted = $2 WHERE photographer_id = $1
`

type AcceptBookingParams struct {
	PhotographerID string `json:"photographer_id"`
	Accepted       bool   `json:"accepted"`
}

func (q *Queries) AcceptBooking(ctx context.Context, arg AcceptBookingParams) error {
	_, err := q.db.ExecContext(ctx, acceptBooking, arg.PhotographerID, arg.Accepted)
	return err
}

const createBooking = `-- name: CreateBooking :one
INSERT INTO bookings (media_id, task, price, credits, date_start, date_end, lat, lng)
    VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING id
`

type CreateBookingParams struct {
	MediaID   string               `json:"media_id"`
	Task      string               `json:"task"`
	Price     int32                `json:"price"`
	Credits   int32                `json:"credits"`
	DateStart timeparser.Timestamp `json:"date_start"`
	DateEnd   timeparser.Timestamp `json:"date_end"`
	Lat       string               `json:"lat"`
	Lng       string               `json:"lng"`
}

func (q *Queries) CreateBooking(ctx context.Context, arg CreateBookingParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createBooking,
		arg.MediaID,
		arg.Task,
		arg.Price,
		arg.Credits,
		arg.DateStart,
		arg.DateEnd,
		arg.Lat,
		arg.Lng,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createProfile = `-- name: CreateProfile :one
INSERT INTO profiles (user_id, pro_level)
    VALUES ($1, $2) RETURNING id
`

type CreateProfileParams struct {
	UserID   string `json:"user_id"`
	ProLevel int32  `json:"pro_level"`
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createProfile, arg.UserID, arg.ProLevel)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteBooking = `-- name: DeleteBooking :exec
DELETE FROM bookings WHERE id = $1
`

func (q *Queries) DeleteBooking(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteBooking, id)
	return err
}

const getBookingsByMediaUID = `-- name: GetBookingsByMediaUID :many
SELECT id, media_id, photographer_id, task, price, credits, accepted, completed, date_start, date_end, created_at, lat, lng FROM bookings WHERE media_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetBookingsByMediaUID(ctx context.Context, mediaID string) ([]Booking, error) {
	rows, err := q.db.QueryContext(ctx, getBookingsByMediaUID, mediaID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Booking
	for rows.Next() {
		var i Booking
		if err := rows.Scan(
			&i.ID,
			&i.MediaID,
			&i.PhotographerID,
			&i.Task,
			&i.Price,
			&i.Credits,
			&i.Accepted,
			&i.Completed,
			&i.DateStart,
			&i.DateEnd,
			&i.CreatedAt,
			&i.Lat,
			&i.Lng,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, user_id, pro_level FROM profiles WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (Profile, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i Profile
	err := row.Scan(&i.ID, &i.UserID, &i.ProLevel)
	return i, err
}

const listBookingsByUser = `-- name: ListBookingsByUser :many
SELECT
    bookings.task,
    bookings.credits,
    bookings.price,
    bookings.created_at,
    bookings.accepted,
    bookings.completed,
    profiles.pro_level,
    profiles.user_id
FROM
    bookings
    LEFT JOIN profiles ON bookings.media_id = profiles.user_id
ORDER BY
    bookings.created_at DESC,
    bookings.accepted DESC
LIMIT 5
`

type ListBookingsByUserRow struct {
	Task      string               `json:"task"`
	Credits   int32                `json:"credits"`
	Price     int32                `json:"price"`
	CreatedAt timeparser.Timestamp `json:"created_at"`
	Accepted  bool                 `json:"accepted"`
	Completed bool                 `json:"completed"`
	ProLevel  int32                `json:"pro_level"`
	UserID    string               `json:"user_id"`
}

func (q *Queries) ListBookingsByUser(ctx context.Context) ([]ListBookingsByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, listBookingsByUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListBookingsByUserRow
	for rows.Next() {
		var i ListBookingsByUserRow
		if err := rows.Scan(
			&i.Task,
			&i.Credits,
			&i.Price,
			&i.CreatedAt,
			&i.Accepted,
			&i.Completed,
			&i.ProLevel,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBookingStatus = `-- name: UpdateBookingStatus :exec
UPDATE bookings SET accepted = $2, completed = $3, task = $4 WHERE id = $1
`

type UpdateBookingStatusParams struct {
	ID        uuid.UUID `json:"id"`
	Accepted  bool      `json:"accepted"`
	Completed bool      `json:"completed"`
	Task      string    `json:"task"`
}

func (q *Queries) UpdateBookingStatus(ctx context.Context, arg UpdateBookingStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateBookingStatus,
		arg.ID,
		arg.Accepted,
		arg.Completed,
		arg.Task,
	)
	return err
}
